---
- name: Gather facts
  setup:

- name: Install Python, pip, and Nginx on Amazon Linux
  block:
    - name: Install nginx from amazon-linux-extras
      command: amazon-linux-extras install -y nginx1
      changed_when: true
    
    - name: Install Python3 and pip on Amazon Linux
      yum:
        name:
          - python3
          - python3-pip
        state: present
  when: ansible_distribution == "Amazon"
  become: true

- name: Install Python, pip, and Nginx on other systems
  block:
    - name: Try installing with yum
      yum:
        name:
          - python3
          - python3-pip
          - nginx
        state: present
      register: yum_result
      ignore_errors: true
      when: ansible_os_family == "RedHat" and ansible_distribution != "Amazon"
    
    - name: Try installing with apt
      apt:
        name:
          - python3
          - python3-pip
          - nginx
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
  become: true

- name: Ensure Nginx is started and enabled
  systemd:
    name: nginx
    state: started
    enabled: yes
  become: true

- name: Install Python packages
  pip:
    name:
      - flask
      - gunicorn
      - prometheus_client
    executable: pip3
    state: present
  become: true

- name: Create Flask app directory
  file:
    path: /opt/flask_dashboard
    state: directory
    mode: '0755'
  become: true

- name: Create Flask app file
  copy:
    dest: /opt/flask_dashboard/app.py
    content: |
      from flask import Flask, Response
      from prometheus_client import Counter, generate_latest, CONTENT_TYPE_LATEST, Gauge

      app = Flask(__name__)

      # Create metrics
      REQUESTS = Counter('flask_app_requests_total', 'Total number of requests to the Flask app')
      ACTIVE_USERS = Gauge('flask_app_active_users', 'Number of active users')

      # Set some initial values
      ACTIVE_USERS.set(5)  # Example value

      @app.route('/')
      def home():
          REQUESTS.inc()  # Increment the counter
          return '''
          <h1>Flask Monitoring Dashboard</h1>
          <p>This is a simple Flask app with Prometheus metrics.</p>
          <p>Visit <a href="/metrics">/metrics</a> to see the Prometheus metrics.</p>
          '''

      @app.route('/metrics')
      def metrics():
          REQUESTS.inc()  # Increment the counter
          return Response(generate_latest(), mimetype=CONTENT_TYPE_LATEST)

      if __name__ == '__main__':
          app.run(host='0.0.0.0', port=8000)
    mode: '0644'
  become: true

- name: Create requirements.txt
  copy:
    dest: /opt/flask_dashboard/requirements.txt
    content: |
      flask
      gunicorn
      prometheus_client
    mode: '0644'
  become: true

- name: Create systemd service for Gunicorn
  copy:
    dest: /etc/systemd/system/flaskapp.service
    content: |
      [Unit]
      Description=Gunicorn Flask Dashboard
      After=network.target

      [Service]
      WorkingDirectory=/opt/flask_dashboard
      ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 app:app
      Restart=always

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Enable and start flaskapp service
  systemd:
    name: flaskapp
    state: started
    enabled: yes
  become: true

- name: Configure Nginx
  copy:
    dest: /etc/nginx/conf.d/flaskapp.conf
    content: |
      server {
        listen 80;
        server_name _;

        location / {
          proxy_pass http://127.0.0.1:8000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
        }

        location /metrics {
          proxy_pass http://127.0.0.1:8000/metrics;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
        }
      }
    mode: '0644'
  become: true

- name: Restart Nginx
  systemd:
    name: nginx
    state: restarted
  become: true

- name: Wait for Flask app to be accessible
  uri:
    url: http://localhost/metrics
    status_code: 200
  register: flask_result
  until: flask_result.status == 200
  retries: 5
  delay: 10
  ignore_errors: true
  become: true