---
- name: Gather facts
  setup:

- name: Install Python, pip, and Nginx on Amazon Linux
  block:
    - name: Install nginx from amazon-linux-extras
      command: amazon-linux-extras install -y nginx1
      changed_when: true
    
    - name: Install Python3 and pip on Amazon Linux
      yum:
        name:
          - python3
          - python3-pip
        state: present
  when: ansible_distribution == "Amazon"
  become: true

- name: Install Python, pip, and Nginx on other systems
  block:
    - name: Try installing with yum
      yum:
        name:
          - python3
          - python3-pip
          - nginx
        state: present
      register: yum_result
      ignore_errors: true
      when: ansible_os_family == "RedHat" and ansible_distribution != "Amazon"
    
    - name: Try installing with apt
      apt:
        name:
          - python3
          - python3-pip
          - nginx
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
  become: true

- name: Ensure Nginx is started and enabled
  systemd:
    name: nginx
    state: started
    enabled: yes
  become: true

- name: Install Python packages
  pip:
    name:
      - flask
      - gunicorn
      - prometheus-flask-exporter
    executable: pip3
    state: present
  become: true

- name: Create Flask app directory
  file:
    path: /opt/flask_dashboard
    state: directory
    mode: '0755'
  become: true

- name: Create Flask app file
  copy:
    dest: /opt/flask_dashboard/app.py
    content: |
      from flask import Flask, request
      from prometheus_flask_exporter import PrometheusMetrics

      app = Flask(__name__)
      metrics = PrometheusMetrics(app)

      # Add some default metrics
      metrics.info('app_info', 'Application info', version='1.0.0')

      # Custom metrics
      @metrics.counter('http_requests_total', 'Total HTTP Requests',
                  labels={'endpoint': lambda: request.endpoint})
      @app.route('/')
      def dashboard():
          return '''
          <html>
          <head>
              <title>CEEYIT Dashboard</title>
              <style>
                  body { font-family: Arial; background: #FEFEFE; text-align: center; margin-top: 100px; }
                  h1 { color: #2A9D8F; }
                  p { font-size: 18px; color: #264653; }
                  .metrics-link { 
                      display: inline-block; 
                      margin-top: 20px; 
                      padding: 10px 15px; 
                      background-color: #4CAF50; 
                      color: white; 
                      text-decoration: none; 
                      border-radius: 4px; 
                  }
              </style>
          </head>
          <body>
              <h1>CEEYIT Monitoring Dashboard</h1>
              <p>Your DevOps metrics will be visualized here.</p>
              <p><a href="/metrics" class="metrics-link">View Prometheus Metrics</a></p>
          </body>
          </html>
          '''

      if __name__ == '__main__':
          app.run(host='0.0.0.0', port=8000)
    mode: '0644'
  become: true

- name: Create requirements.txt
  copy:
    dest: /opt/flask_dashboard/requirements.txt
    content: |
      flask
      gunicorn
      prometheus-flask-exporter
    mode: '0644'
  become: true

- name: Create systemd service for Gunicorn
  copy:
    dest: /etc/systemd/system/flaskapp.service
    content: |
      [Unit]
      Description=Gunicorn Flask Dashboard
      After=network.target

      [Service]
      WorkingDirectory=/opt/flask_dashboard
      ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 app:app
      Restart=always

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Enable and start flaskapp service
  systemd:
    name: flaskapp
    state: restarted
    enabled: yes
  become: true

- name: Configure Nginx
  copy:
    dest: /etc/nginx/conf.d/flaskapp.conf
    content: |
      server {
        listen 80;
        server_name _;

        location / {
          proxy_pass http://127.0.0.1:8000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
        }
      }
    mode: '0644'
  become: true

- name: Restart Nginx
  systemd:
    name: nginx
    state: restarted
  become: true