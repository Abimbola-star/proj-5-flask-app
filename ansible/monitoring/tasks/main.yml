---
- name: Gather facts
  setup:
  
- name: Install Docker on Amazon Linux
  command: amazon-linux-extras install -y docker
  when: ansible_distribution == "Amazon"
  register: docker_install_amazon
  changed_when: docker_install_amazon.rc == 0 and "Installing" in docker_install_amazon.stdout
  become: true

- name: Install Docker on CentOS/RHEL
  yum:
    name: docker
    state: present
  when: ansible_os_family == "RedHat" and ansible_distribution != "Amazon"
  become: true

- name: Install Docker on Debian/Ubuntu
  apt:
    name: docker.io
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  become: true

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: yes
  become: true

- name: Create directories for Prometheus and Grafana
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - /opt/prometheus/config
    - /opt/grafana/data
  become: true

- name: Create Prometheus config
  copy:
    dest: /opt/prometheus/config/prometheus.yml
    content: |
      global:
        scrape_interval: 15s

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'flask_dashboard'
          metrics_path: /metrics
          static_configs:
            - targets: ['10.0.101.245:80']
    mode: '0644'
  become: true

# Remove existing containers to avoid conflicts
- name: Remove existing Prometheus container if any
  shell: docker rm -f prometheus || true
  become: true

- name: Remove existing Grafana container if any
  shell: docker rm -f grafana || true
  become: true

# Create systemd service files for containers
- name: Create Prometheus systemd service
  copy:
    dest: /etc/systemd/system/prometheus-container.service
    content: |
      [Unit]
      Description=Prometheus Container
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      Restart=always
      ExecStartPre=-/usr/bin/docker stop prometheus
      ExecStartPre=-/usr/bin/docker rm prometheus
      ExecStartPre=/usr/bin/docker pull prom/prometheus:latest
      ExecStart=/usr/bin/docker run --rm --name prometheus -p 9090:9090 -v /opt/prometheus/config:/etc/prometheus prom/prometheus:latest
      ExecStop=/usr/bin/docker stop prometheus

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  become: true

- name: Create Grafana systemd service
  copy:
    dest: /etc/systemd/system/grafana-container.service
    content: |
      [Unit]
      Description=Grafana Container
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      Restart=always
      ExecStartPre=-/usr/bin/docker stop grafana
      ExecStartPre=-/usr/bin/docker rm grafana
      ExecStartPre=/usr/bin/docker pull grafana/grafana:latest
      ExecStart=/usr/bin/docker run --rm --name grafana -p 3000:3000 -v /opt/grafana/data:/var/lib/grafana grafana/grafana:latest
      ExecStop=/usr/bin/docker stop grafana

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  become: true

# Reload systemd and start services
- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Enable and start Prometheus service
  systemd:
    name: prometheus-container
    state: started
    enabled: yes
  become: true

- name: Enable and start Grafana service
  systemd:
    name: grafana-container
    state: started
    enabled: yes
  become: true

# Verify services are accessible
- name: Wait for Prometheus to be accessible
  uri:
    url: http://localhost:9090
    status_code: 200
  register: prometheus_result
  until: prometheus_result.status == 200
  retries: 5
  delay: 10
  ignore_errors: true
  become: true

- name: Wait for Grafana to be accessible
  uri:
    url: http://localhost:3000
    status_code: 200
  register: grafana_result
  until: grafana_result.status == 200
  retries: 5
  delay: 10
  ignore_errors: true
  become: true
...